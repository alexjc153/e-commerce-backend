// üöÄ Jenkinsfile - Pipeline de CI/CD para aplicaci√≥n NestJS (ecommerce)
// üì¶ Este pipeline automatiza el proceso de construcci√≥n, pruebas y despliegue con Docker

pipeline {
    agent any

    // üõ†Ô∏è Herramientas necesarias
    tools {
        nodejs 'NODEJS_HOME' // Debe estar configurado en Jenkins
    }

    // üîß Variables de entorno globales
    environment {
        DOCKER_PROJECT_NAME = 'ecomapp'
        APP_CONTAINER_NAME = 'ecommerce-nestjs-app'
        DB_CONTAINER_NAME = 'ecommerce-postgres'
        REPO_URL = 'https://github.com/alexjc153/e-commerce-backend.git'
    }

    stages {
        // üì• Etapa 1: Clonaci√≥n del repositorio
        stage('Clone Repository') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    echo 'üîÑ === INICIO: CLONACI√ìN DEL REPOSITORIO ==='
                    cleanWs()
                    git branch: 'main', url: "${REPO_URL}"
                    echo '‚úÖ === FIN: REPOSITORIO CLONADO ==='
                }
            }
        }

        // ‚öôÔ∏è Etapa 2: Instalaci√≥n de dependencias y construcci√≥n
        stage('Install & Build') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    echo 'üì¶ === INICIO: INSTALACI√ìN Y COMPILACI√ìN ==='
                    sh 'npm install'
                    sh 'npm run build'
                    echo '‚úÖ === FIN: PROYECTO COMPILADO ==='
                }
            }
        }

        // üß™ Etapa 3: Pruebas unitarias con cobertura
        stage('Run Tests') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    echo 'üß™ === INICIO: PRUEBAS UNITARIAS ==='
                    sh 'npm run test:cov'
                    echo '‚úÖ === FIN: PRUEBAS COMPLETADAS ==='
                }
            }
        }

        /*
        // üìä Etapa 4: An√°lisis de calidad con SonarQube (opcional)
        stage('SonarQube Analysis') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    echo 'üìä === INICIO: AN√ÅLISIS CON SONARQUBE ==='
                    withSonarQubeEnv('sonarqube') {
                        sh "npx sonarqube-scanner"
                    }
                    echo '‚úÖ === FIN: AN√ÅLISIS ENVIADO A SONARQUBE ==='
                }
            }
        }

        // üéØ Etapa 5: Verificaci√≥n de calidad (Quality Gate)
        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    echo 'üéØ === INICIO: VERIFICACI√ìN DE QUALITY GATE ==='
                    waitForQualityGate abortPipeline: true
                    echo '‚úÖ === FIN: QUALITY GATE APROBADO ==='
                }
            }
        }
        */

        // üöÄ Etapa 6: Despliegue con Docker Compose
        stage('Deploy Application') {
            steps {
                echo 'üöÄ === INICIO: DESPLIEGUE CON DOCKER COMPOSE ==='
                dir('docker') {
                    script {
                        // 1Ô∏è‚É£ Limpieza de contenedores anteriores
                        echo 'üßπ Limpiando contenedores anteriores...'
                        try {
                            sh "docker-compose -p ${DOCKER_PROJECT_NAME} down -v --remove-orphans"
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Advertencia: ${e.getMessage()}"
                        }

                        // 2Ô∏è‚É£ Construcci√≥n y levantamiento de servicios
                        echo 'üîß Construyendo y levantando servicios...'
                        sh "docker-compose -p ${DOCKER_PROJECT_NAME} up -d --build"

                        // 3Ô∏è‚É£ Espera inicial para base de datos
                        echo '‚è≥ Esperando que la base de datos inicialice...'
                        sleep(20)
                        sh "docker exec ${DB_CONTAINER_NAME} pg_isready"

                        // 4Ô∏è‚É£ Espera adicional para aplicaci√≥n
                        echo '‚è≥ Esperando que la aplicaci√≥n est√© lista...'
                        sleep(30)

                        // 5Ô∏è‚É£ Mostrar logs recientes de la aplicaci√≥n
                        echo 'üìã √öltimos logs de la aplicaci√≥n:'
                        sh "docker logs --tail 100 ${APP_CONTAINER_NAME}"
                    }
                }
                echo '‚úÖ === FIN: DESPLIEGUE COMPLETADO ==='
            }
        }
    }

    // üìù Acciones post-ejecuci√≥n
    post {
        always {
            echo 'üèÅ === PIPELINE FINALIZADO ==='
        }
        success {
            echo 'üéâ ‚úì Pipeline ejecutado exitosamente'
        }
        failure {
            echo 'üí• ‚úó El pipeline ha fallado'
        }
    }
}
