pipeline {
    agent any
    environment {
        // Configuraci√≥n de repositorios
        BACKEND_REPO = 'https://github.com/alexjc153/e-commerce-backend.git'
        FRONTEND_REPO = 'https://github.com/alexjc153/requeriments-project.git'

        // Nombres de contenedores
        BACKEND_CONTAINER = 'ecommerce-nestjs-app'
        FRONTEND_CONTAINER = 'ecommerce-angular-app'
        DB_CONTAINER = 'ecommerce-postgres'
        COMPOSE_PROJECT_NAME = 'ecomapp'

        // Configuraci√≥n de PostgreSQL
        DB_NAME = 'EcommerceDB'
        DB_USER = 'postgres'
        DB_PASSWORD = 'postgres_*01'  // Cambiar en producci√≥n
        DB_PORT = '5000'              // Puerto expuesto en host
        DB_INTERNAL_PORT = '5432'     // Puerto interno de PostgreSQL

        // Configuraci√≥n de conexi√≥n
        DB_HOST = "${DB_CONTAINER}"   // Usa el nombre del servicio como host
        DB_USE_SSL = 'false'
        DB_SSL_REJECT_UNAUTHORIZED = 'false'

        // Configuraci√≥n JWT
        JWT_SECRET = 'smartsolutions**2024'          // Cambiar en producci√≥n
        JWT_REFRESH = 'smartsolutionsRefresh**2024'  // Cambiar en producci√≥n

        // Entorno Node
        NODE_ENV = 'production'
    }

    stages {
        // 1. Limpieza total previa
        stage('Limpiar despliegue anterior') {
            steps {
                script {
                    sh """
                    echo "=== Eliminando recursos anteriores ==="
                    docker-compose -p ${COMPOSE_PROJECT_NAME} down --rmi all -v --remove-orphans || true
                    docker rm -f ${BACKEND_CONTAINER} ${FRONTEND_CONTAINER} ${DB_CONTAINER} || true
                    docker volume rm -f ${COMPOSE_PROJECT_NAME}_pgdata || true
                    """
                }
            }
        }

        // 2. Clonar repositorios
        stage('Clonar c√≥digo') {
            steps {
                parallel(
                    'Backend': {
                        dir('backend') {
                            git url: "${BACKEND_REPO}", branch: 'main'
                            sh 'ls -la docker/Dockerfile || { echo "‚ùå Dockerfile no encontrado"; exit 1; }'
                        }
                    },
                    'Frontend': {
                        dir('frontend') {
                            git url: "${FRONTEND_REPO}", branch: 'main'
                            sh 'ls -la docker/Dockerfile || { echo "‚ùå Dockerfile no encontrado"; exit 1; }'
                        }
                    }
                )
            }
        }

        // 3. Generar docker-compose.yml
        stage('Generar compose') {
            steps {
                writeFile file: 'docker-compose.prod.yml', text: """
                version: '3.8'

                services:
                  backend:
                    build:
                      context: ./backend
                      dockerfile: docker/Dockerfile
                    container_name: ${BACKEND_CONTAINER}
                    ports:
                      - "3000:3000"
                    environment:
                      - DB_HOST=${DB_HOST}
                      - DB_PORT=${DB_INTERNAL_PORT}
                      - DB_USER=${DB_USER}
                      - DB_PASSWORD=${DB_PASSWORD}
                      - DB_NAME=${DB_NAME}
                      - DB_USE_SSL=${DB_USE_SSL}
                      - DB_SSL_REJECT_UNAUTHORIZED=${DB_SSL_REJECT_UNAUTHORIZED}
                      - JWT_SECRET=${JWT_SECRET}
                      - JWT_REFRESH=${JWT_REFRESH}
                      - NODE_ENV=${NODE_ENV}
                    depends_on:
                      db:
                        condition: service_healthy
                    healthcheck:
                      test: ["CMD", "curl -f http://localhost:3000/api/healthcheck || exit 1"]
                      interval: 10s
                      timeout: 5s
                      retries: 3
                    restart: unless-stopped

                  frontend:
                    build:
                      context: ./frontend
                      dockerfile: docker/Dockerfile
                    container_name: ${FRONTEND_CONTAINER}
                    ports:
                      - "80:80"
                    restart: unless-stopped

                  db:
                    image: postgres:13-alpine
                    container_name: ${DB_CONTAINER}
                    environment:
                      POSTGRES_USER: ${DB_USER}
                      POSTGRES_PASSWORD: ${DB_PASSWORD}
                      POSTGRES_DB: ${DB_NAME}
                    volumes:
                      - pgdata:/var/lib/postgresql/data
                    ports:
                      - "${DB_PORT}:${DB_INTERNAL_PORT}"
                    healthcheck:
                      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
                      interval: 5s
                      timeout: 5s
                      retries: 10
                    restart: unless-stopped

                volumes:
                  pgdata:
                """
            }
        }

        // 4. Despliegue controlado
        stage('Desplegar aplicaci√≥n') {
            steps {
                script {
                    // 1. Iniciar PostgreSQL
                    sh """
                    echo "=== Iniciando PostgreSQL ==="
                    docker-compose -p ${COMPOSE_PROJECT_NAME} -f docker-compose.prod.yml up -d db
                    """

                    // 2. Esperar inicializaci√≥n de PostgreSQL
                    timeout(time: 3, unit: 'MINUTES') {
                        sh """
                        echo "=== Esperando PostgreSQL... ==="
                        while ! docker exec ${DB_CONTAINER} pg_isready -U ${DB_USER}; do
                            sleep 5
                            docker logs ${DB_CONTAINER} --tail 20
                        done
                        """
                    }

                    // 3. Iniciar Backend
                    sh """
                    echo "=== Iniciando Backend ==="
                    docker-compose -p ${COMPOSE_PROJECT_NAME} -f docker-compose.prod.yml up -d backend

                    echo "=== Esperando inicializaci√≥n del Backend (30 segundos) ==="
                    sleep 30
                    """

                    // 4. Verificar Backend
                    sh """
                    echo "=== Verificando Backend ==="
                    BACKEND_STATUS=\$(docker inspect -f '{{.State.Status}}' ${BACKEND_CONTAINER})
                    if [ "\$BACKEND_STATUS" != "running" ]; then
                        echo "‚ùå Backend fall√≥ (Estado: \$BACKEND_STATUS)"
                        echo "=== √öltimos 200 logs ==="
                        docker logs ${BACKEND_CONTAINER} --tail 200
                        exit 1
                    fi
                    """

                    // 5. Iniciar Frontend
                    sh """
                    echo "=== Iniciando Frontend ==="
                    docker-compose -p ${COMPOSE_PROJECT_NAME} -f docker-compose.prod.yml up -d frontend
                    """

                    // 6. Verificaci√≥n final
                    sh """
                    echo "=== Estado de contenedores ==="
                    docker ps -a --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}'

                    echo "\\n=== Prueba de conexi√≥n ==="
                    echo "Backend: \$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/healthcheck)"
                    echo "Frontend: \$(curl -s -o /dev/null -w "%{http_code}" http://localhost)"
                    """
                }
            }
        }
    }

    post {
        always {
            echo '=== Resumen final ==='
            sh """
            echo "\\n=== Contenedores activos ==="
            docker ps --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}'
            """
        }
        failure {
            echo '=== üîç Debug avanzado ==='
            sh """
            echo "\\n=== Logs PostgreSQL ==="
            docker logs ${DB_CONTAINER} --tail 50 || true

            echo "\\n=== Logs Backend ==="
            docker logs ${BACKEND_CONTAINER} --tail 200 || true

            echo "\\n=== Variables de entorno Backend ==="
            docker exec ${BACKEND_CONTAINER} env || true
            """
        }
    }
}
